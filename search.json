[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "There’s antimony, arsenic, aluminum, selenium."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "A Million Little Monomers",
    "section": "",
    "text": "Quarto: Back to Blog\n\n\nPublication-Grade Technical Communication\n\n\n\n\nHousekeeping\n\n\nHowto\n\n\nQuarto\n\n\n\n\nContext and path to adoption of the best scientific and publishing system of today\n\n\n\n\n\n\nMar 13, 2023\n\n\nLiqC\n\n\n\n\n\n\n  \n\n\n\n\nElements of Surprise\n\n\nAnd some polypropylene\n\n\n\n\nHello, World\n\n\nTables\n\n\nBokeh\n\n\n\n\nSomething else to get started.\n\n\n\n\n\n\nFeb 3, 2022\n\n\nLiqC\n\n\n\n\n\n\n  \n\n\n\n\nPolyethylene\n\n\nAnd a small periodic table\n\n\n\n\nHello, World\n\n\nTables\n\n\n\n\nSomething to get started.\n\n\n\n\n\n\nFeb 2, 2022\n\n\nLiqC\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/23/quarto-back-in-blog/index.html",
    "href": "posts/23/quarto-back-in-blog/index.html",
    "title": "Quarto: Back to Blog",
    "section": "",
    "text": "Many moons ago, I had a LiveJournal blog about fun times in a chemistry lab. It was my first attempt to put some thoughts together in a foreign language. Drawing molecules and silly commentary on the science of the day with I-Can-Has-Cheeseburger-style illustrations was the name of the game. Fast forward fifteen years… I became a data analyst/engineer/scientist, and a lot of my thoughts are in or near code (python and friends). One thing did not change: I still enjoy drawing molecules.\n\n\n\n\n\nThere will be molecules!\n\n\nAnother thing that did not change: Wordpress is still one of the most popular platforms for just about everything on the web. But see, I want my blog to run my shiny 2023 code.\nI’ve been looking for a solution that could serve as a platform and for my own thoughts, as well as something that could work as a knowledge management system in a corporate setting. If you spent any time on tech teams, you know that writing documentation is one of the eternal pain points. In data science, you often want to present your thoughts mixed together with code, most commonly in Jupyter notebooks. You also want nicely styled page layout and code blocks, and some support for content management (screenshots, images, videos). Over the years I’ve been a part of data science/engineering teams in biotech, healthcare, and telecom, I haven’t seen a solution I liked. Chances are, if I worked at Google, I’d embrace markdown-driven publishing sooner.\n\n\nWhether you like or hate Jupyter notebooks, you have to admit that they are the vehicle for innovation around data. FastAI’s Jeremy Howard has probably taken Jupyter notebooks further than anyone: the entire 20K-stars deep learning library and the printed book that goes along with it were both created entirely in notebooks. He’s a fan of scientific journaling, the habit of documenting your thought process, and I like the idea as well. Writing in interactive notebooks allows your code and your thought process to coexist, so you can communicate to others and your future self not just what you did but why you did it.\n\n\n\nLiterate programming is a methodology that combines a programming language with a documentation language, thereby making programs more robust, more portable, more easily maintained, and arguably more fun to write than programs that are written only in a high-level language. The main idea is to treat a program as a piece of literature, addressed to human beings rather than to a computer.1\n\nOf course, problems begin what you’re attempting to build on somebody’s work in a notebook (environments), or put them on github, or build some kind of knowledge or analytics repository from notebooks. You have to make compromises.\n\n\n\nI first learned about Quarto from Jeremy Howard’s I Like Notebooks talk. From there I learned about FastAI’s nbdev and its documentation framework called fastpages. Around the same time, the creators of RStudio and RMarkdown, the company founded by JJ Allaire that is now known as Posit, released Quarto. The FastAI team recognized that Quarto supersedes what they were able to build to date, and decided to abandon their work and endorse Quarto. The fact that prominent practitioners from the R and Python worlds converged on one vehicle for insight delivery was enough for me to settle on Quarto.\n\nOne of the main ideas of Quarto is to help scientific communication take better advantage of the web while still not losing the focus on print. Another piece, which was a huge focus of the R community, is reproducibility. All your work should be in a computational document that runs top to bottom. Your figures, tables, and results are reproducibly made by code. Accurate, trustworthy computing of scientific results is the prime directive.2\n\n\n\n\nThe output of browser-native data exploration should end up in a browser-native habitat. Viewed as an HTML page that is decorated with care and attention to detail, your code and narrative are experienced in a very similar way to how the author first created it. With syntax highlighting, interactive plots, and codefolding, the output appeals to a range of audiences. Some may choose to read the TLDR and browse the figures. Some will play with the charts. Some will examine the code. The experience reminds me of a safari: the wildlife is as wild as it gets, and the visitor has lots of choices for how to interact with it. If some of the native functionality is removed, your notebook may be a zoo, or even in a circus. Live notebooks solutions (Binder, JupyterHub) remain slow and fragile. Standalone notebook files require you to fire up your own Jupyter (your execs won’t be doing that). Github-rendered notebooks lose output, and often fail to show up at all. There’s a fair chance that Github will eventually implement Quarto for showing notebooks.\n\n\n\nHere’s a list of features I’m loving. Quite far from discovering all of what Quarto has to offer.\n\nPreview the rendered page, with livereload.\nHTML output that does not suck. You may have tried save a notebook as HTML, which is done with nbconvert, and learned how clunky it is. Here, the conversion just works, looks great, and loads fast. All the interactive charts remain interactive (Altair, Bokeh, Plotly all work). The code blocks are easily portable, thanks to a copy button.\nOptions for comments.\nPublish with one command to Github Pages or Quarto’s own platform.\nYou can directly paste iframes code to embed special content (like the YouTube video above), giving you functionality similar to Notion.\nRich use of markdown. Quarto’s VSCode extension will even render the Quarto-native .qmd file as a notebook.\nThe ability to select different execution kernels (bring your own requirements.txt or poetry.lock). Quarto allows you to select kernels, which are just JSON files pointed at the right interpreter. Assuming you’ve got ipykernel in your package, run python -m ipykernel install --user --name my_env to link the python executable to my_env kernel; check jupyter kernelspec list to find the files and verify.\nOption for self-contained HTML output files with all content, stylesheets, and scripts embedded.\nChoice of themes and layouts.\nBring your own CSS for extra customization.\n\n\n\n\n\n\n\n/* indent and justify */\nsection > p {\n    text-indent: 1em;\n    text-align: justify;\n}"
  },
  {
    "objectID": "posts/23/elements-of-surprise/index.html",
    "href": "posts/23/elements-of-surprise/index.html",
    "title": "Elements of Surprise",
    "section": "",
    "text": "A surprising periodic table of elements.\n\n\nShow the code\ndef elements_of_surprise():\n    \"\"\"Adapted from https://docs.bokeh.org/en/latest/docs/gallery/periodic.html\"\"\"\n    \n    from bokeh.sampledata.periodic_table import elements\n    df = elements.copy()\n\n    # element of surprise\n    df[[\"name\",\"symbol\"]] = df[[\"name\",\"symbol\"]].sample(frac=1).values\n\n    # plotting\n    from bokeh.embed import file_html\n    from bokeh.plotting import figure\n    from bokeh.resources import CDN\n    from bokeh.transform import dodge, factor_cmap\n    from IPython.display import HTML\n\n    periods = [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\"]\n    groups = [str(x) for x in range(1, 19)]\n\n    df = elements.copy()\n\n    #element of surprise\n    df[[\"name\",\"symbol\"]] = df[[\"name\",\"symbol\"]].sample(frac=1).values\n\n    df[\"atomic mass\"] = df[\"atomic mass\"].astype(str).apply(lambda x: x[:8])\n    df[\"group\"] = df[\"group\"].astype(str)\n    df[\"period\"] = [periods[x-1] for x in df.period]\n    df = df[df.group != \"-\"]\n\n    cmap = {\n        \"alkali metal\"         : \"#a6cee3\",\n        \"alkaline earth metal\" : \"#1f78b4\",\n        \"metal\"                : \"#d93b43\",\n        \"halogen\"              : \"#999d9a\",\n        \"metalloid\"            : \"#e08d49\",\n        \"noble gas\"            : \"#eaeaea\",\n        \"nonmetal\"             : \"#f1d4Af\",\n        \"transition metal\"     : \"#599d7A\",\n    }\n\n    TOOLTIPS = [\n        (\"Name\", \"@name\"),\n        (\"Atomic number\", \"@{atomic number}\"),\n        (\"Atomic mass\", \"@{atomic mass}\"),\n        (\"Type\", \"@metal\"),\n        (\"CPK color\", \"$color[hex, swatch]:CPK\"),\n        (\"Electronic configuration\", \"@{electronic configuration}\"),\n    ]\n\n    p = figure(title=\"Periodic Table\", width=1200, height=500,\n            x_range=groups, y_range=list(reversed(periods)),\n            tools=\"hover\", toolbar_location=None, tooltips=TOOLTIPS)\n\n    r = p.rect(\"group\", \"period\", 0.95, 0.95, source=df, fill_alpha=0.6, legend_field=\"metal\",\n            color=factor_cmap('metal', palette=list(cmap.values()), factors=list(cmap.keys())))\n\n    text_props = dict(source=df, text_align=\"left\", text_baseline=\"middle\")\n\n    x = dodge(\"group\", -0.4, range=p.x_range)\n\n    p.text(x=x, y=dodge(\"period\", 0.05, range=p.y_range), text=\"symbol\",\n        text_font_size=\"18px\", text_font_style=\"bold\", **text_props)\n\n    p.text(x=x, y=dodge(\"period\", 0.3, range=p.y_range), text=\"atomic number\",\n        text_font_size=\"14px\", **text_props)\n\n    p.text(x=x, y=dodge(\"period\", -0.35, range=p.y_range), text=\"name\",\n        text_font_size=\"10px\", **text_props)\n\n    p.text(x=x, y=dodge(\"period\", -0.2, range=p.y_range), text=\"atomic mass\",\n        text_font_size=\"10px\", **text_props)\n\n    p.outline_line_color = None\n    p.grid.grid_line_color = None\n    p.axis.axis_line_color = None\n    p.axis.major_tick_line_color = None\n    p.axis.major_label_standoff = 0\n    p.legend.orientation = \"horizontal\"\n    p.legend.location =\"top_center\"\n    p.hover.renderers = [r] # only hover element boxes\n\n    html = file_html(p, CDN, \"Periodic Table\")\n    return HTML(html)\n\n\n\nelements_of_surprise()\n\n\n\n\n  \n    \n    Periodic Table\n\n    \n    \n  \n  \n    \n  \n    \n    \n  \n\n\n\n\n\n\nCH(CH3)CH2CH(CH3)CH2CH(CH3)CH2CH(CH3)CH2CH(CH3)CH2 CH(CH3)CH2CH(CH3)CH2CH(CH3)CH2CH(CH3)CH2CH(CH3)CH2 CH(CH3)CH2CH(CH3)CH2CH(CH3)CH2CH(CH3)CH2CH(CH3)CH2 CH(CH3)CH2CH(CH3)CH2CH(CH3)CH2CH(CH3)CH2CH(CH3)CH2 CH(CH3)CH2CH(CH3)CH2CH(CH3)CH2CH(CH3)CH2CH(CH3)CH2 CH(CH3)CH2CH(CH3)CH2CH(CH3)CH2CH(CH3)CH2CH(CH3)CH2 CH(CH3)CH2CH(CH3)CH2CH(CH3)CH2CH(CH3)CH2CH(CH3)CH2\n\n\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 42 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r, 'r-')\nax.set_rticks([0, 1, 2])\nax.grid(True)\nplt.show()\n\n\n\n\nFigure 1: A line plot on a polar axis"
  },
  {
    "objectID": "posts/23/polyethylene/index.html",
    "href": "posts/23/polyethylene/index.html",
    "title": "Polyethylene",
    "section": "",
    "text": "CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2 CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2 CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2 CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2 CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2 CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2 CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2CH2\n\n\n| Period  | Group 1 | Group 2 | Group 17 | Group 18 |\n|---------|:--------|--------:|:--------:|:--------:|\n| 1       | H       |         |          | He       |\n| 2       | Li      | Be      | F        | Ne       |"
  }
]